import Head from "next/head";
import {
  dehydrate,
  FetchInfiniteQueryOptions,
  QueryClient,
  useInfiniteQuery,
} from "@tanstack/react-query";
import { Fragment, useEffect } from "react";
import { useInView } from "react-intersection-observer";

import { CompanyCard } from "../components/CompanyCard";
import { QueryResult } from "../types";

const queryOptions: FetchInfiniteQueryOptions<
  QueryResult,
  unknown,
  QueryResult,
  string[]
> = {
  queryKey: ["companies"],
  queryFn: ({ pageParam = 0 }: { pageParam?: number }) =>
    getCompanies(pageParam),
  getPreviousPageParam: (firstPage) => firstPage.previousId ?? undefined,
  getNextPageParam: (lastPage) => lastPage.nextId ?? undefined,
};

async function getCompanies(pageParam: number): Promise<QueryResult> {
  const response = await fetch(
    `http://localhost:${process.env.PORT ?? 3000}/api/companies?cursor=${
      pageParam || 0
    }&pageSize=100`
  );
  const data: QueryResult = await response.json();
  return data;
}

export const useCompanies = () => useInfiniteQuery(queryOptions);

export async function getStaticProps() {
  const queryClient = new QueryClient();

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return {
    props: {
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
  };
}

export default function Feed() {
  const { ref, inView } = useInView();
  const { data, fetchNextPage, hasNextPage, isFetchingNextPage, status } =
    useCompanies();

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [inView, fetchNextPage]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {status === "loading" ? (
          <p className="text-center">Loading...</p>
        ) : (
          <>
            <div className="flex flex-col space-y-3.5">
              {data?.pages.map((page) => (
                <Fragment key={page?.nextId}>
                  {page?.data?.map(({ company, id }) => (
                    <CompanyCard company={company} key={id} />
                  ))}
                </Fragment>
              ))}
            </div>
            <p ref={ref} className="text-center mt-6">
              {isFetchingNextPage
                ? "Loading more..."
                : hasNextPage
                ? "Load Newer"
                : "Nothing more to load"}
            </p>
          </>
        )}
      </main>
    </>
  );
}
